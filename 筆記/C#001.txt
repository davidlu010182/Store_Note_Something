int.MaxValue
byte 0 ~ 255
sbyte 127 ~ 128
Type t = typeof(int)
int 可以直接轉乘byte 前提是在範圍內(其餘皆相似)
Char.IsLower(value) Char.IsLetter(value)
( $"{a*a} is int" ) -> string  $擺在""前面 大括號裡面可擺程式，可以有多個大括號。
var names = new List<string>{"a", "b", "c"};
names.Add()  names.Remove()  names.Count() names.Sort()
foreach(var name in names){}
names[0] names[1]
name.IndexOf("a") -> 反向查詢，若無則傳回-1
Queue<T> Stack<T> 多執行緒並行版本: ConcurrentQueue<T>
LinkedList<T> ArrayList StringCollection Hashtable SortedList...
輕量級語法，Ex.  public override string ToString() => FirstName + " " + LastName;
using static System.Math ， 可以直接存取靜態成員與巢狀類別，如print(PI)，而不需要像print(Math.PI)來存取PI
Thing?.member，若Thing為null，返回null。
array?[5]，若取到的值為null，返回null。
bool? Boo = GetBool()，若取到的值為null，Boo為null。有些型別不能使用。
以上操作若無"?"，全部報錯。
arr.HasValue()，若arr為null或無值，返回null。
try{}catch(Expetion e)when(LogSomething(e)){ } //when裡面放能返回bool的函式，e非必要。若返回true，catch裡面結束後繼續執行。
nameof(arr)，傳回變數名稱arr。nameof(Math.PI)，只傳回PI。
var student = {name:"fff", age:8}，這叫Tuple，非物件，類似struct。需要System.ValueTuple。
(C#7.1)也可以直接複製已有var值，使用小括號代替大括號。 var name = "df"; var age = 4; var student = {name, age};
var @for = 33; 這樣就不會把@後面的東西，看成是保留字。之後對該東西進行任何操作皆須加上@。
@"\"，相等於"\\"。 在""前面加上@，裡面的東西就會忽略特殊字元，如"、\a、\n...。
attribute，一種可以附加在函式或類別上的額外附件。系統本身提供一些，也可以透過定義類別並繼承系統自帶的屬性的方式，來創造自己的屬性
這些附件提供多種功能，可以是額外儲存的變數、編譯期的行為...等。訪問的方法各不相同。
Action<in parameter> func 傳遞函數(有參數，返回void)
Func<in parameter, ot return> func 傳遞函數(有參數，有返回值)
Converter.ToInt32()，轉型
var a = 物件實體 as 物件型別 若轉型不成功，返回null