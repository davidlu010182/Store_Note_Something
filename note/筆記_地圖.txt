Map類重寫，分為WorldMap和inTileMap。
WorldMap：世界大地圖，採地塊式，如tome4，用二維陣列儲存，方便擴充。為靜態式。
並且在背後有影子，影子包含地塊邏輯(如矮人要塞，紀錄氣候script地層script)，和地塊集團(XX山脈,XX森林)。
inTileMap：地塊內的地圖，由WorldMap演算而來(陣列內元素為主，影子為副，輔以種子碼)，若有特殊地形存
在(如奇觀,生命之樹,死沼)，再重新演算一遍(接壤附近)。如同副本般(除非像tome4的靜態地圖)，只有進入時
才會演算出來，存活期限為沒有進入後的三個月後，三個月後會刪除，等到再進入時再演算。

整個世界地圖由CreateWorld演算，並生成為靜態二維陣列與影子。
而WorldMap類為遊戲內的暫存，只包含整個世界地圖(和影子)的一部份(即清晰度較低的部分)。所以有"換地圖"
在遊戲過程中若有更動到地圖，則將變動寫入至script(更改地塊&影子)裡，之後再依據scipt去更動。

//fin >> 忽略空格，還有換行****
靜態地圖:用二維陣列儲存每個地塊發生的事，浪費記憶體。
虛擬地圖:將地圖上每個物件的位置存起來，節省記憶體，算法複雜。
	 載入的XY座標為 signed int 如普通坐標系，以中央做原點。

地形,放置物等靜態物件(讀取更改次數較少的) 用靜態地圖載入全部。
人物怪物生物等動態物件，用虛擬地圖記錄位置
特殊觸發物件:將地圖分割為數個100*100的區塊(數字可變)，在觸發條件抵達該區塊時載入，用以減少消耗
並在離開該區域後free()，/*事實上，存活週期需仔細再規劃

map物件應增加一名成員List。
該成員為列表。ex:
int  int int
24   16  
43   54  
...
第一個int為儲存在mapArr裡的數字，第二個表示該數字是啥東西，第三個數字表示該東西。

map物件的成員mapType (int)用以儲存該地圖檔案的形式:
/*考慮用列舉enum包裝 =_=
0:保留
1:靜態地圖,包含所有地形
2:一串種子碼，之後需用該碼生成地圖*-*
3:

tile的轉變：從一個tile轉變(衰退or進步)成另一個tile，這其中的過程需要規劃。
方法1.一個檔案裡放一種tile的基本與所有可能的變體，轉變時用放在其中的類script來簡單判斷轉至哪一個。
方法2.一個檔案裡放一個大類的tile(草原,草丘陵,草山地)，轉變時依據外置的條件進化表來判斷，需跨檔案。
條件進化表，如樹，節點為tile，連接的線為條件(有多個符合條件的用機率)，轉變時檢查所有的線判斷。
方法3.去掉固定tile，改用基本元素來構成一個tile，另做一個規則表來表示每個元素和其組合的屬性加值。
問題：取名麻煩(或許乾脆不顯示名字)，地塊的script難以生成。基本元素：乾土,沙,草,長草,石礫
需要另作一個list來管理這些新tile，好處是可以不用分資料夾(要分也可以)

tile由基本資源組成，例：有草有土為草原,只有沙為沙漠。所有的組合都必須列出來，並一一給這些組合標上名
字，因為tile間的轉變是以這東西為依據，例：燒掉草後，重新計算組合，再找出這種組合對應的tile。
在此之外，稀有資源則是外掛式的，稀有資源的定義(屬性)由gObjectList衍生而出，並另存於world中，等到
createWorld時分配到地圖上。

tile的種類分為flat, mountain, hill等幾種，這些分類主導intile地圖的生成。而每個tile各自的屬性除了草沙
等物質之外，還有高度(x軸)。用高度加上另外的標示符(是否凹凸不平,是否有高低差)來分種類。

因此，每個tile有基礎資源,稀有資源,特殊景觀,高度,特殊標示符等屬性，這些屬性在worldCreate時決定，