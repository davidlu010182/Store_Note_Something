MMap類重寫，分為WorldMap和inTileMap。
WorldMap：世界大地圖，採地塊式，如tome4，用二維陣列儲存，方便擴充。為靜態式。
並且在背後有影子，影子包含地塊邏輯(如矮人要塞，紀錄氣候script地層script)，和地塊集團(XX山脈,XX森林)。
inTileMap：地塊內的地圖，由WorldMap演算而來(陣列內元素為主，影子為副，輔以種子碼)，若有特殊地形存
在(如奇觀,生命之樹,死沼)，再重新演算一遍(接壤附近)。如同副本般(除非像tome4的靜態地圖)，只有進入時
才會演算出來，存活期限為沒有進入後的三個月後，三個月後會刪除，等到再進入時再演算。

整個世界地圖由CreateWorld演算，並生成為靜態二維陣列與影子。
而WorldMap類為遊戲內的暫存，只包含整個世界地圖(和影子)的一部份(即清晰度較低的部分)。所以有"換地圖"
在遊戲過程中若有更動到地圖，則將變動寫入至script(更改地塊&影子)裡，之後再依據scipt去更動。

//fin >> 忽略空格，還有換行****
靜態地圖:用二維陣列儲存每個地塊發生的事，浪費記憶體。
虛擬地圖:將地圖上每個物件的位置存起來，節省記憶體，算法複雜。
	 載入的XY座標為 signed int 如普通坐標系，以中央做原點。
	 
最終決定:一起用

地形,放置物等靜態物件(讀取更改次數較少的) 用靜態地圖載入全部。
人物怪物生物等動態物件，用虛擬地圖記錄位置
特殊觸發物件:將地圖分割為數個100*100的區塊(數字可變)，在觸發條件抵達該區塊時載入，用以減少消耗
並在離開該區域後free()，/*事實上，存活週期需仔細再規劃

遊戲內核：如萬智牌，將一切分三：生物，物品，地牌。事件&法術等物之後再規劃。
因此會有三個list來編列物件。並有對應的模板(用struct表示，需弄個資料夾來儲存)來描述物件。

考慮，所有world共用三個gList。(暫定)

卡片系統(所有東西，包括地形，皆有其描述法，用卡片的形式顯示出來)
一個世界裡應該有二個list，用來描述該世界裡的物件。
第一個list為靜態物件表(gMainList)，裡面為每個物件編立序號(第一個int數字，因此最多可容納2147..個物件)
，第二個數字指向第二個list內對應數字的東西。

第二個list為物實體內容表(模板表),裡面每個序號內裝的是該物件的內容(血量,硬度,代表的圖標*指向giconlist

(gIconlist)第三個list為圖標表，每個序號後面裝著檔名。(用來簡化麻煩)

map物件應增加一名成員List。
該成員為列表。ex:
int  int int
24   16  
43   54  
...
第一個int為儲存在mapArr裡的數字，第二個表示該數字是啥東西，第三個數字表示該東西。

map物件的成員mapType (int)用以儲存該地圖檔案的形式:
/*考慮用列舉enum包裝 =_=
0:保留
1:靜態地圖,包含所有地形
2:一串種子碼，之後需用該碼生成地圖*-*
3:

解析度(清晰度)(視野):分為六等(再考慮)，第一等為主角身邊的世界(村莊,團隊),第二等為國家(本國&周邊),....
每等級有該等級專屬的list，用來放單位。

狀態:實際有數字被放進模板裡，(活的)。

單位(troops):
可為單人or集團。從gmainlist獲取模板or生成新模板。
根據解晰度(清晰度)，獲得狀態。(活的)
放在該解析度等級的list裡。

該解析度等級的list裡放滿單位，其下再以區域為界分堆存放。

maininterface顯示法:專屬list:interfacelist
載入一個list，該list內有二元素，一為int陣列(一個袋子，裝數個數字)，一為string(檔名)。

將該地圖內要顯示的單位從gmainlist裡找出他代表的圖標(一個int，對應giconlist)，
再從gIconlist裡複製檔名後，堆到interfacelist裡(序號+1)。然後把該單位在list的序號丟進袋子裡。

顯示時，從1開始遍歷list，(以檔名為主)
，逐個用該檔案顯示袋子內的東西(該單位的狀態裡應有方向,位址/*?位址是否應該統一保管?)。
袋子的問題:可能不夠大(在有多個不同單位共用同個圖標時)。
sol；限定一個袋子只能裝10種單位，並在裝袋時計數，
滿了之後在list尾端複製一個同樣檔名的三元素(but袋子是空的)。

tile的轉變：從一個tile轉變(衰退or進步)成另一個tile，這其中的過程需要規劃。
方法1.一個檔案裡放一種tile的基本與所有可能的變體，轉變時用放在其中的類script來簡單判斷轉至哪一個。
方法2.一個檔案裡放一個大類的tile(草原,草丘陵,草山地)，轉變時依據外置的條件進化表來判斷，需跨檔案。
條件進化表，如樹，節點為tile，連接的線為條件(有多個符合條件的用機率)，轉變時檢查所有的線判斷。
方法3.去掉固定tile，改用基本元素來構成一個tile，另做一個規則表來表示每個元素和其組合的屬性加值。
問題：取名麻煩(或許乾脆不顯示名字)，地塊的script難以生成。基本元素：乾土,沙,草,長草,石礫
需要另作一個list來管理這些新tile，好處是可以不用分資料夾(要分也可以)

WorldMap裡的每個tile都為1平方公里。而內部則以1公尺為基礎單位。在實際運行時不必糾結於一格一個troop，
而是用體積計算占用的格數。因此顯示格線時的基準為畫面上的體積最小單位。